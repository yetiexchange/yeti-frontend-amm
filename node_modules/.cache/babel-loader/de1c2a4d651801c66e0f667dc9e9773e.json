{"ast":null,"code":"import{isAddress}from'../../utils';export function filterTokens(tokens,search){if(search.length===0)return tokens;var searchingAddress=isAddress(search);if(searchingAddress){return tokens.filter(function(token){return token.address===searchingAddress;});}var lowerSearchParts=search.toLowerCase().split(/\\s+/).filter(function(s){return s.length>0;});if(lowerSearchParts.length===0){return tokens;}var matchesSearch=function matchesSearch(s){var sParts=s.toLowerCase().split(/\\s+/).filter(function(str){return str.length>0;});return lowerSearchParts.every(function(p){return p.length===0||sParts.some(function(sp){return sp.startsWith(p)||sp.endsWith(p);});});};return tokens.filter(function(token){var symbol=token.symbol,name=token.name;return symbol&&matchesSearch(symbol)||name&&matchesSearch(name);});}export default filterTokens;","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/components/SearchModal/filtering.ts"],"names":["isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","str","every","p","some","sp","startsWith","endsWith","symbol","name"],"mappings":"AACA,OAASA,SAAT,KAA0B,aAA1B,CAEA,MAAO,SAASC,CAAAA,YAAT,CAAsBC,MAAtB,CAAuCC,MAAvC,CAAgE,CACrE,GAAIA,MAAM,CAACC,MAAP,GAAkB,CAAtB,CAAyB,MAAOF,CAAAA,MAAP,CAEzB,GAAMG,CAAAA,gBAAgB,CAAGL,SAAS,CAACG,MAAD,CAAlC,CAEA,GAAIE,gBAAJ,CAAsB,CACpB,MAAOH,CAAAA,MAAM,CAACI,MAAP,CAAc,SAACC,KAAD,QAAWA,CAAAA,KAAK,CAACC,OAAN,GAAkBH,gBAA7B,EAAd,CAAP,CACD,CAED,GAAMI,CAAAA,gBAAgB,CAAGN,MAAM,CAC5BO,WADsB,GAEtBC,KAFsB,CAEhB,KAFgB,EAGtBL,MAHsB,CAGf,SAACM,CAAD,QAAOA,CAAAA,CAAC,CAACR,MAAF,CAAW,CAAlB,EAHe,CAAzB,CAKA,GAAIK,gBAAgB,CAACL,MAAjB,GAA4B,CAAhC,CAAmC,CACjC,MAAOF,CAAAA,MAAP,CACD,CAED,GAAMW,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACD,CAAD,CAAwB,CAC5C,GAAME,CAAAA,MAAM,CAAGF,CAAC,CACbF,WADY,GAEZC,KAFY,CAEN,KAFM,EAGZL,MAHY,CAGL,SAACS,GAAD,QAASA,CAAAA,GAAG,CAACX,MAAJ,CAAa,CAAtB,EAHK,CAAf,CAKA,MAAOK,CAAAA,gBAAgB,CAACO,KAAjB,CAAuB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACb,MAAF,GAAa,CAAb,EAAkBU,MAAM,CAACI,IAAP,CAAY,SAACC,EAAD,QAAQA,CAAAA,EAAE,CAACC,UAAH,CAAcH,CAAd,GAAoBE,EAAE,CAACE,QAAH,CAAYJ,CAAZ,CAA5B,EAAZ,CAAzB,EAAvB,CAAP,CACD,CAPD,CASA,MAAOf,CAAAA,MAAM,CAACI,MAAP,CAAc,SAACC,KAAD,CAAW,IACtBe,CAAAA,MADsB,CACLf,KADK,CACtBe,MADsB,CACdC,IADc,CACLhB,KADK,CACdgB,IADc,CAG9B,MAAQD,CAAAA,MAAM,EAAIT,aAAa,CAACS,MAAD,CAAxB,EAAsCC,IAAI,EAAIV,aAAa,CAACU,IAAD,CAAlE,CACD,CAJM,CAAP,CAKD,CAED,cAAetB,CAAAA,YAAf","sourcesContent":["import { Token } from '@pancakeswap-libs/sdk'\nimport { isAddress } from '../../utils'\n\nexport function filterTokens(tokens: Token[], search: string): Token[] {\n  if (search.length === 0) return tokens\n\n  const searchingAddress = isAddress(search)\n\n  if (searchingAddress) {\n    return tokens.filter((token) => token.address === searchingAddress)\n  }\n\n  const lowerSearchParts = search\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter((s) => s.length > 0)\n\n  if (lowerSearchParts.length === 0) {\n    return tokens\n  }\n\n  const matchesSearch = (s: string): boolean => {\n    const sParts = s\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((str) => str.length > 0)\n\n    return lowerSearchParts.every((p) => p.length === 0 || sParts.some((sp) => sp.startsWith(p) || sp.endsWith(p)))\n  }\n\n  return tokens.filter((token) => {\n    const { symbol, name } = token\n\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name))\n  })\n}\n\nexport default filterTokens\n"]},"metadata":{},"sourceType":"module"}