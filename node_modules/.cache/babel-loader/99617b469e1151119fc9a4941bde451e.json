{"ast":null,"code":"import{useContext}from'react';import{TranslationsContext}from'../hooks/TranslationsContext';var variableRegex=/%(.*?)%/;var replaceDynamicString=function replaceDynamicString(foundTranslation,fallback){// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nvar stringToReplace=variableRegex.exec(foundTranslation)[0];var indexToReplace=foundTranslation.split(' ').indexOf(stringToReplace);var fallbackValueAtIndex=fallback.split(' ')[indexToReplace];return foundTranslation.replace(stringToReplace,fallbackValueAtIndex);};export var getTranslation=function getTranslation(translations,translationId,fallback){var foundTranslation=translations.find(function(translation){return translation.data.stringId===translationId;});if(foundTranslation){var translatedString=foundTranslation.data.text;var includesVariable=translatedString.includes('%');if(includesVariable){return replaceDynamicString(translatedString,fallback);}return translatedString;}return fallback;};export var TranslateString=function TranslateString(translationId,fallback){var _useContext=useContext(TranslationsContext),translations=_useContext.translations;if(translations[0]==='error'){return fallback;}if(translations.length>0){return getTranslation(translations,translationId,fallback);}return null;};","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/utils/translateTextHelpers.ts"],"names":["useContext","TranslationsContext","variableRegex","replaceDynamicString","foundTranslation","fallback","stringToReplace","exec","indexToReplace","split","indexOf","fallbackValueAtIndex","replace","getTranslation","translations","translationId","find","translation","data","stringId","translatedString","text","includesVariable","includes","TranslateString","length"],"mappings":"AAAA,OAASA,UAAT,KAA2B,OAA3B,CACA,OAASC,mBAAT,KAAoC,8BAApC,CAEA,GAAMC,CAAAA,aAAa,CAAG,SAAtB,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,gBAAD,CAA2BC,QAA3B,CAAgD,CAC3E;AACA,GAAMC,CAAAA,eAAe,CAAGJ,aAAa,CAACK,IAAd,CAAmBH,gBAAnB,EAAsC,CAAtC,CAAxB,CACA,GAAMI,CAAAA,cAAc,CAAGJ,gBAAgB,CAACK,KAAjB,CAAuB,GAAvB,EAA4BC,OAA5B,CAAoCJ,eAApC,CAAvB,CACA,GAAMK,CAAAA,oBAAoB,CAAGN,QAAQ,CAACI,KAAT,CAAe,GAAf,EAAoBD,cAApB,CAA7B,CACA,MAAOJ,CAAAA,gBAAgB,CAACQ,OAAjB,CAAyBN,eAAzB,CAA0CK,oBAA1C,CAAP,CACD,CAND,CAQA,MAAO,IAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,YAAD,CAA2BC,aAA3B,CAAkDV,QAAlD,CAAuE,CACnG,GAAMD,CAAAA,gBAAgB,CAAGU,YAAY,CAACE,IAAb,CAAkB,SAACC,WAAD,CAAiB,CAC1D,MAAOA,CAAAA,WAAW,CAACC,IAAZ,CAAiBC,QAAjB,GAA8BJ,aAArC,CACD,CAFwB,CAAzB,CAGA,GAAIX,gBAAJ,CAAsB,CACpB,GAAMgB,CAAAA,gBAAgB,CAAGhB,gBAAgB,CAACc,IAAjB,CAAsBG,IAA/C,CACA,GAAMC,CAAAA,gBAAgB,CAAGF,gBAAgB,CAACG,QAAjB,CAA0B,GAA1B,CAAzB,CACA,GAAID,gBAAJ,CAAsB,CACpB,MAAOnB,CAAAA,oBAAoB,CAACiB,gBAAD,CAAmBf,QAAnB,CAA3B,CACD,CACD,MAAOe,CAAAA,gBAAP,CACD,CACD,MAAOf,CAAAA,QAAP,CACD,CAbM,CAeP,MAAO,IAAMmB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACT,aAAD,CAAwBV,QAAxB,CAA6C,iBACjDL,UAAU,CAACC,mBAAD,CADuC,CAClEa,YADkE,aAClEA,YADkE,CAE1E,GAAIA,YAAY,CAAC,CAAD,CAAZ,GAAoB,OAAxB,CAAiC,CAC/B,MAAOT,CAAAA,QAAP,CACD,CACD,GAAIS,YAAY,CAACW,MAAb,CAAsB,CAA1B,CAA6B,CAC3B,MAAOZ,CAAAA,cAAc,CAACC,YAAD,CAAeC,aAAf,CAA8BV,QAA9B,CAArB,CACD,CACD,MAAO,KAAP,CACD,CATM","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../hooks/TranslationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const stringToReplace = variableRegex.exec(foundTranslation)![0]\n  const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[indexToReplace]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}