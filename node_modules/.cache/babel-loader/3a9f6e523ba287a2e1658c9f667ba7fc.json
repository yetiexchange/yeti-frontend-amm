{"ast":null,"code":"import _toConsumableArray from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _WETH_ONLY;import{ChainId,JSBI,Percent,Token,WETH}from'@pancakeswap-libs/sdk';// import { bsc, fortmatic, injected, portis, walletconnect, walletlink } from '../connectors'\nimport{injected,bsc}from'../connectors';// TODO\nexport var ROUTER_ADDRESS='0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F';// a list of tokens by chain\nexport var DAI=new Token(ChainId.MAINNET,'0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',18,'DAI','Dai Stablecoin');export var BUSD=new Token(ChainId.MAINNET,'0xe9e7cea3dedca5984780bafc599bd69add087d56',18,'BUSD','Binance USD');export var USDT=new Token(ChainId.MAINNET,'0x55d398326f99059ff775485246999027b3197955',18,'USDT','Tether USD');export var EOS=new Token(ChainId.MAINNET,'0x56b6fb708fc5732dec1afc8d8556423a2edccbd6',18,'EOS','EOS Token');export var DOT=new Token(ChainId.MAINNET,'0x7083609fce4d1d8dc0c979aab8c869ea2c873402',18,'DOT','Polkadot Token');export var ETH=new Token(ChainId.MAINNET,'0x2170ed0880ac9a755fd29b2688956bd959f933f8',18,'ETH','Ethereum Token');var WETH_ONLY=(_WETH_ONLY={},_defineProperty(_WETH_ONLY,ChainId.MAINNET,[WETH[ChainId.MAINNET]]),_defineProperty(_WETH_ONLY,ChainId.BSCTESTNET,[WETH[ChainId.BSCTESTNET]]),_WETH_ONLY);// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[ChainId.MAINNET]),[DAI,BUSD,USDT,EOS,DOT])));/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */export var CUSTOM_BASES=_defineProperty({},ChainId.MAINNET,_defineProperty({},ETH.address,[DAI,WETH[ChainId.MAINNET]]));// used for display in the default list when adding liquidity\nexport var SUGGESTED_BASES=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[ChainId.MAINNET]),[DAI,BUSD,USDT])));// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[ChainId.MAINNET]),[DAI,BUSD,USDT])));export var PINNED_PAIRS=_defineProperty({},ChainId.MAINNET,[[new Token(ChainId.MAINNET,'0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',18,'CAKE','PancakeSwap Token'),new Token(ChainId.MAINNET,'0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',18,'WBNB','Wrapped BNB')],[BUSD,USDT],[DAI,USDT]]);export var SUPPORTED_WALLETS={BSC:{connector:bsc,name:'Binance Chain Wallet',iconName:'binance.svg',description:'Easy-to-use browser extension.',href:null,color:'#E8831D'},INJECTED:{connector:injected,name:'Injected',iconName:'arrow-right.svg',description:'Injected web3 provider.',href:null,color:'#010101',primary:true},METAMASK:{connector:injected,name:'MetaMask',iconName:'metamask.png',description:'Easy-to-use browser extension.',href:null,color:'#E8831D'}// WALLET_CONNECT: {\n//   connector: walletconnect,\n//   name: 'WalletConnect',\n//   iconName: 'walletConnectIcon.svg',\n//   description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n//   href: null,\n//   color: '#4196FC',\n//   mobile: true\n// },\n// WALLET_LINK: {\n//   connector: walletlink,\n//   name: 'Coinbase Wallet',\n//   iconName: 'coinbaseWalletIcon.svg',\n//   description: 'Use Coinbase Wallet app on mobile device',\n//   href: null,\n//   color: '#315CF5'\n// },\n// COINBASE_LINK: {\n//   name: 'Open in Coinbase Wallet',\n//   iconName: 'coinbaseWalletIcon.svg',\n//   description: 'Open in Coinbase Wallet app.',\n//   href: 'https://go.cb-w.com/mtUDhEZPy1',\n//   color: '#315CF5',\n//   mobile: true,\n//   mobileOnly: true\n// },\n// FORTMATIC: {\n//   connector: fortmatic,\n//   name: 'Fortmatic',\n//   iconName: 'fortmaticIcon.png',\n//   description: 'Login using Fortmatic hosted wallet',\n//   href: null,\n//   color: '#6748FF',\n//   mobile: true\n// },\n// Portis: {\n//   connector: portis,\n//   name: 'Portis',\n//   iconName: 'portisIcon.png',\n//   description: 'Login using Portis hosted wallet',\n//   href: null,\n//   color: '#4A6C9B',\n//   mobile: true\n// }\n};export var NetworkContextName='NETWORK';// default allowed slippage, in bips\nexport var INITIAL_ALLOWED_SLIPPAGE=80;// 20 minutes, denominated in seconds\nexport var DEFAULT_DEADLINE_FROM_NOW=60*20;// one basis point\nexport var ONE_BIPS=new Percent(JSBI.BigInt(1),JSBI.BigInt(10000));export var BIPS_BASE=JSBI.BigInt(10000);// used for warning states\nexport var ALLOWED_PRICE_IMPACT_LOW=new Percent(JSBI.BigInt(100),BIPS_BASE);// 1%\nexport var ALLOWED_PRICE_IMPACT_MEDIUM=new Percent(JSBI.BigInt(300),BIPS_BASE);// 3%\nexport var ALLOWED_PRICE_IMPACT_HIGH=new Percent(JSBI.BigInt(500),BIPS_BASE);// 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport var PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN=new Percent(JSBI.BigInt(1000),BIPS_BASE);// 10%\n// for non expert mode disable swaps above this\nexport var BLOCKED_PRICE_IMPACT_NON_EXPERT=new Percent(JSBI.BigInt(1500),BIPS_BASE);// 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport var MIN_ETH=JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(16));// .01 ETH\nexport var BETTER_TRADE_LINK_THRESHOLD=new Percent(JSBI.BigInt(75),JSBI.BigInt(10000));","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","injected","bsc","ROUTER_ADDRESS","DAI","MAINNET","BUSD","USDT","EOS","DOT","ETH","WETH_ONLY","BSCTESTNET","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","address","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","SUPPORTED_WALLETS","BSC","connector","name","iconName","description","href","color","INJECTED","primary","METAMASK","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate","BETTER_TRADE_LINK_THRESHOLD"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\n// import { bsc, fortmatic, injected, portis, walletconnect, walletlink } from '../connectors'\nimport { injected, bsc } from '../connectors'\n// TODO\nexport const ROUTER_ADDRESS = '0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\nexport const DAI = new Token(ChainId.MAINNET, '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3', 18, 'DAI', 'Dai Stablecoin')\nexport const BUSD = new Token(ChainId.MAINNET, '0xe9e7cea3dedca5984780bafc599bd69add087d56', 18, 'BUSD', 'Binance USD')\nexport const USDT = new Token(ChainId.MAINNET, '0x55d398326f99059ff775485246999027b3197955', 18, 'USDT', 'Tether USD')\nexport const EOS = new Token(ChainId.MAINNET, '0x56b6fb708fc5732dec1afc8d8556423a2edccbd6', 18, 'EOS', 'EOS Token')\nexport const DOT = new Token(ChainId.MAINNET, '0x7083609fce4d1d8dc0c979aab8c869ea2c873402', 18, 'DOT', 'Polkadot Token')\nexport const ETH = new Token(ChainId.MAINNET, '0x2170ed0880ac9a755fd29b2688956bd959f933f8', 18, 'ETH', 'Ethereum Token')\n\nconst WETH_ONLY: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]]\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT, EOS, DOT]\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {\n    [ETH.address]: [DAI, WETH[ChainId.MAINNET]]\n  }\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT]\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT]\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.MAINNET]: [\n    [\n      new Token(ChainId.MAINNET, '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82', 18, 'CAKE', 'PancakeSwap Token'),\n      new Token(ChainId.MAINNET, '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c', 18, 'WBNB', 'Wrapped BNB')\n    ],\n    [BUSD, USDT],\n    [DAI, USDT]\n  ]\n}\n\nexport interface WalletInfo {\n  connector?: AbstractConnector\n  name: string\n  iconName: string\n  description: string\n  href: string | null\n  color: string\n  primary?: true\n  mobile?: true\n  mobileOnly?: true\n}\n\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\n  BSC: {\n    connector: bsc,\n    name: 'Binance Chain Wallet',\n    iconName: 'binance.svg',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  },\n  INJECTED: {\n    connector: injected,\n    name: 'Injected',\n    iconName: 'arrow-right.svg',\n    description: 'Injected web3 provider.',\n    href: null,\n    color: '#010101',\n    primary: true\n  },\n  METAMASK: {\n    connector: injected,\n    name: 'MetaMask',\n    iconName: 'metamask.png',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  }\n  // WALLET_CONNECT: {\n  //   connector: walletconnect,\n  //   name: 'WalletConnect',\n  //   iconName: 'walletConnectIcon.svg',\n  //   description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n  //   href: null,\n  //   color: '#4196FC',\n  //   mobile: true\n  // },\n  // WALLET_LINK: {\n  //   connector: walletlink,\n  //   name: 'Coinbase Wallet',\n  //   iconName: 'coinbaseWalletIcon.svg',\n  //   description: 'Use Coinbase Wallet app on mobile device',\n  //   href: null,\n  //   color: '#315CF5'\n  // },\n  // COINBASE_LINK: {\n  //   name: 'Open in Coinbase Wallet',\n  //   iconName: 'coinbaseWalletIcon.svg',\n  //   description: 'Open in Coinbase Wallet app.',\n  //   href: 'https://go.cb-w.com/mtUDhEZPy1',\n  //   color: '#315CF5',\n  //   mobile: true,\n  //   mobileOnly: true\n  // },\n  // FORTMATIC: {\n  //   connector: fortmatic,\n  //   name: 'Fortmatic',\n  //   iconName: 'fortmaticIcon.png',\n  //   description: 'Login using Fortmatic hosted wallet',\n  //   href: null,\n  //   color: '#6748FF',\n  //   mobile: true\n  // },\n  // Portis: {\n  //   connector: portis,\n  //   name: 'Portis',\n  //   iconName: 'portisIcon.png',\n  //   description: 'Login using Portis hosted wallet',\n  //   href: null,\n  //   color: '#4A6C9B',\n  //   mobile: true\n  // }\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 80\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\nexport const BETTER_TRADE_LINK_THRESHOLD = new Percent(JSBI.BigInt(75), JSBI.BigInt(10000))\n"]},"metadata":{},"sourceType":"module"}