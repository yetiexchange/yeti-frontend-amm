{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { Trade } from '@pancakeswap-libs/sdk';\nimport flatMap from 'lodash.flatmap';\nimport { useMemo } from 'react';\nimport { BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES } from '../constants';\nimport { PairState, usePairs } from '../data/Reserves';\nimport { wrappedCurrency } from '../utils/wrappedCurrency';\nimport { useActiveWeb3React } from './index';\n\nfunction useAllCommonPairs(currencyA, currencyB) {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React(); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const bases = chainId ? BASES_TO_CHECK_TRADES_AGAINST[chainId] : [];\n  const [tokenA, tokenB] = chainId ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)] : [undefined, undefined];\n  const basePairs = useMemo(() => flatMap(bases, base => bases.map(otherBase => [base, otherBase])).filter(([t0, t1]) => t0.address !== t1.address), [bases]);\n  const allPairCombinations = useMemo(() => tokenA && tokenB ? [// the direct pair\n  [tokenA, tokenB], // token A against all bases\n  ...bases.map(base => [tokenA, base]), // token B against all bases\n  ...bases.map(base => [tokenB, base]), // each base against all bases\n  ...basePairs].filter(tokens => Boolean(tokens[0] && tokens[1])).filter(([t0, t1]) => t0.address !== t1.address) // eslint-disable-next-line @typescript-eslint/no-shadow\n  .filter(([tokenA, tokenB]) => {\n    if (!chainId) return true;\n    const customBases = CUSTOM_BASES[chainId];\n    if (!customBases) return true;\n    const customBasesA = customBases[tokenA.address];\n    const customBasesB = customBases[tokenB.address];\n    if (!customBasesA && !customBasesB) return true;\n    if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n    if (customBasesB && !customBasesB.find(base => tokenA.equals(base))) return false;\n    return true;\n  }) : [], [tokenA, tokenB, bases, basePairs, chainId]);\n  const allPairs = usePairs(allPairCombinations); // only pass along valid pairs, non-duplicated pairs\n\n  return useMemo(() => Object.values(allPairs // filter out invalid pairs\n  .filter(result => Boolean(result[0] === PairState.EXISTS && result[1])) // filter out duplicated pairs\n  .reduce((memo, [, curr]) => {\n    var _memo$curr$liquidityT;\n\n    memo[curr.liquidityToken.address] = (_memo$curr$liquidityT = memo[curr.liquidityToken.address]) !== null && _memo$curr$liquidityT !== void 0 ? _memo$curr$liquidityT : curr;\n    return memo;\n  }, {})), [allPairs]);\n}\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\n\n\n_s(useAllCommonPairs, \"yaWNZ7FQVyqbidAZBcCjHinhcek=\", false, function () {\n  return [useActiveWeb3React, usePairs];\n});\n\nexport function useTradeExactIn(currencyAmountIn, currencyOut) {\n  _s2();\n\n  const allowedPairs = useAllCommonPairs(currencyAmountIn === null || currencyAmountIn === void 0 ? void 0 : currencyAmountIn.currency, currencyOut);\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      var _Trade$bestTradeExact;\n\n      return (_Trade$bestTradeExact = Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, {\n        maxHops: 3,\n        maxNumResults: 1\n      })[0]) !== null && _Trade$bestTradeExact !== void 0 ? _Trade$bestTradeExact : null;\n    }\n\n    return null;\n  }, [allowedPairs, currencyAmountIn, currencyOut]);\n}\n/**\n * Returns the best trade for the token in to the exact amount of token out\n */\n\n_s2(useTradeExactIn, \"VKnNShbqc2Xh9bmx09RrKz6CRDo=\", false, function () {\n  return [useAllCommonPairs];\n});\n\nexport function useTradeExactOut(currencyIn, currencyAmountOut) {\n  _s3();\n\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut === null || currencyAmountOut === void 0 ? void 0 : currencyAmountOut.currency);\n  return useMemo(() => {\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\n      var _Trade$bestTradeExact2;\n\n      return (_Trade$bestTradeExact2 = Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, {\n        maxHops: 3,\n        maxNumResults: 1\n      })[0]) !== null && _Trade$bestTradeExact2 !== void 0 ? _Trade$bestTradeExact2 : null;\n    }\n\n    return null;\n  }, [allowedPairs, currencyIn, currencyAmountOut]);\n}\n\n_s3(useTradeExactOut, \"VKnNShbqc2Xh9bmx09RrKz6CRDo=\", false, function () {\n  return [useAllCommonPairs];\n});","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/hooks/Trades.ts"],"names":["Trade","flatMap","useMemo","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","PairState","usePairs","wrappedCurrency","useActiveWeb3React","useAllCommonPairs","currencyA","currencyB","chainId","bases","tokenA","tokenB","undefined","basePairs","base","map","otherBase","filter","t0","t1","address","allPairCombinations","tokens","Boolean","customBases","customBasesA","customBasesB","find","equals","allPairs","Object","values","result","EXISTS","reduce","memo","curr","liquidityToken","useTradeExactIn","currencyAmountIn","currencyOut","allowedPairs","currency","length","bestTradeExactIn","maxHops","maxNumResults","useTradeExactOut","currencyIn","currencyAmountOut","bestTradeExactOut"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, Pair, Token, Trade } from '@pancakeswap-libs/sdk'\nimport flatMap from 'lodash.flatmap'\nimport { useMemo } from 'react'\n\nimport { BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES } from '../constants'\nimport { PairState, usePairs } from '../data/Reserves'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nimport { useActiveWeb3React } from './index'\n\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\n  const { chainId } = useActiveWeb3React()\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const bases: Token[] = chainId ? BASES_TO_CHECK_TRADES_AGAINST[chainId] : []\n\n  const [tokenA, tokenB] = chainId\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n    : [undefined, undefined]\n\n  const basePairs: [Token, Token][] = useMemo(\n    () =>\n      flatMap(bases, (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])).filter(\n        ([t0, t1]) => t0.address !== t1.address\n      ),\n    [bases]\n  )\n\n  const allPairCombinations: [Token, Token][] = useMemo(\n    () =>\n      tokenA && tokenB\n        ? [\n            // the direct pair\n            [tokenA, tokenB],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs,\n          ]\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n            .filter(([t0, t1]) => t0.address !== t1.address)\n            // eslint-disable-next-line @typescript-eslint/no-shadow\n            .filter(([tokenA, tokenB]) => {\n              if (!chainId) return true\n              const customBases = CUSTOM_BASES[chainId]\n              if (!customBases) return true\n\n              const customBasesA: Token[] | undefined = customBases[tokenA.address]\n              const customBasesB: Token[] | undefined = customBases[tokenB.address]\n\n              if (!customBasesA && !customBasesB) return true\n\n              if (customBasesA && !customBasesA.find((base) => tokenB.equals(base))) return false\n              if (customBasesB && !customBasesB.find((base) => tokenA.equals(base))) return false\n\n              return true\n            })\n        : [],\n    [tokenA, tokenB, bases, basePairs, chainId]\n  )\n\n  const allPairs = usePairs(allPairCombinations)\n\n  // only pass along valid pairs, non-duplicated pairs\n  return useMemo(\n    () =>\n      Object.values(\n        allPairs\n          // filter out invalid pairs\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\n          // filter out duplicated pairs\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\n            return memo\n          }, {})\n      ),\n    [allPairs]\n  )\n}\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport function useTradeExactIn(currencyAmountIn?: CurrencyAmount, currencyOut?: Currency): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut)\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      return (\n        Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 3, maxNumResults: 1 })[0] ?? null\n      )\n    }\n    return null\n  }, [allowedPairs, currencyAmountIn, currencyOut])\n}\n\n/**\n * Returns the best trade for the token in to the exact amount of token out\n */\nexport function useTradeExactOut(currencyIn?: Currency, currencyAmountOut?: CurrencyAmount): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency)\n\n  return useMemo(() => {\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\n      return (\n        Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 3, maxNumResults: 1 })[0] ??\n        null\n      )\n    }\n    return null\n  }, [allowedPairs, currencyIn, currencyAmountOut])\n}\n"]},"metadata":{},"sourceType":"module"}