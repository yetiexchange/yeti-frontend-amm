{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useMulticallContract } from './useContract';\nimport ERC20_INTERFACE from '../constants/abis/erc20';\nimport priceContracts from '../constants/eggPriceContracts';\n\n/**\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nconst api = 'https://api.pancakeswap.com/api/v1/price';\n\nconst useGetPriceData = () => {\n  _s();\n\n  const [data, setData] = useState(0);\n  const multicallContract = useMulticallContract();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (multicallContract) {\n          const {\n            cakeAddress,\n            busdAddress,\n            lpAddress\n          } = priceContracts;\n          const calls = [[cakeAddress, ERC20_INTERFACE.encodeFunctionData(\"balanceOf\", [lpAddress])], [busdAddress, ERC20_INTERFACE.encodeFunctionData(\"balanceOf\", [lpAddress])]];\n          const [resultsBlockNumber, result] = await multicallContract.aggregate(calls);\n          const [cakeAmount, busdAmount] = result.map(r => ERC20_INTERFACE.decodeFunctionResult(\"balanceOf\", r));\n          const cake = new BigNumber(cakeAmount);\n          const busd = new BigNumber(busdAmount);\n          const cakePrice = busd.div(cake).toNumber();\n          setData(cakePrice);\n        }\n      } catch (error) {\n        console.error('Unable to fetch price data:', error);\n      }\n    };\n\n    fetchData();\n  }, [multicallContract]);\n  return data;\n};\n\n_s(useGetPriceData, \"PtnqaDbEU0KeyyFRryOby4TMvNk=\", false, function () {\n  return [useMulticallContract];\n});\n\nexport default useGetPriceData;","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/hooks/useGetPriceData.ts"],"names":["useEffect","useState","BigNumber","useMulticallContract","ERC20_INTERFACE","priceContracts","api","useGetPriceData","data","setData","multicallContract","fetchData","cakeAddress","busdAddress","lpAddress","calls","encodeFunctionData","resultsBlockNumber","result","aggregate","cakeAmount","busdAmount","map","r","decodeFunctionResult","cake","busd","cakePrice","div","toNumber","error","console"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,cAAP,MAA2B,gCAA3B;;AASA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAG,0CAAZ;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAS,CAAT,CAAhC;AAEA,QAAMS,iBAAiB,GAAGP,oBAAoB,EAA9C;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,YAAGD,iBAAH,EAAqB;AACnB,gBAAM;AAACE,YAAAA,WAAD;AAAcC,YAAAA,WAAd;AAA2BC,YAAAA;AAA3B,cAAwCT,cAA9C;AACA,gBAAMU,KAAK,GAAG,CACZ,CAACH,WAAD,EAAcR,eAAe,CAACY,kBAAhB,CAAmC,WAAnC,EAAgD,CAACF,SAAD,CAAhD,CAAd,CADY,EAEZ,CAACD,WAAD,EAAcT,eAAe,CAACY,kBAAhB,CAAmC,WAAnC,EAAgD,CAACF,SAAD,CAAhD,CAAd,CAFY,CAAd;AAKA,gBAAM,CAACG,kBAAD,EAAqBC,MAArB,IAA+B,MAAMR,iBAAiB,CAACS,SAAlB,CAA4BJ,KAA5B,CAA3C;AACA,gBAAM,CAACK,UAAD,EAAaC,UAAb,IAA2BH,MAAM,CAACI,GAAP,CAAWC,CAAC,IAAEnB,eAAe,CAACoB,oBAAhB,CAAqC,WAArC,EAAkDD,CAAlD,CAAd,CAAjC;AACA,gBAAME,IAAI,GAAG,IAAIvB,SAAJ,CAAckB,UAAd,CAAb;AACA,gBAAMM,IAAI,GAAG,IAAIxB,SAAJ,CAAcmB,UAAd,CAAb;AACA,gBAAMM,SAAS,GAAGD,IAAI,CAACE,GAAL,CAASH,IAAT,EAAeI,QAAf,EAAlB;AACApB,UAAAA,OAAO,CAACkB,SAAD,CAAP;AACD;AACF,OAfD,CAeE,OAAOG,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACD;AACF,KAnBD;;AAqBAnB,IAAAA,SAAS;AACV,GAvBQ,EAuBN,CAACD,iBAAD,CAvBM,CAAT;AAyBA,SAAOF,IAAP;AACD,CA/BD;;GAAMD,e;UAGsBJ,oB;;;AA8B5B,eAAeI,eAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useMulticallContract } from './useContract'\nimport ERC20_INTERFACE from '../constants/abis/erc20'\nimport priceContracts from '../constants/eggPriceContracts'\n\ntype ApiResponse = {\n  prices: {\n    [key: string]: string\n  }\n  update_at: string\n}\n\n/**\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nconst api = 'https://api.pancakeswap.com/api/v1/price'\n\nconst useGetPriceData = () => {\n  const [data, setData] = useState<number>(0)\n\n  const multicallContract = useMulticallContract();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if(multicallContract){\n          const {cakeAddress, busdAddress, lpAddress} = priceContracts;\n          const calls = [\n            [cakeAddress, ERC20_INTERFACE.encodeFunctionData(\"balanceOf\", [lpAddress])],\n            [busdAddress, ERC20_INTERFACE.encodeFunctionData(\"balanceOf\", [lpAddress])],\n          ];\n\n          const [resultsBlockNumber, result] = await multicallContract.aggregate(calls);\n          const [cakeAmount, busdAmount] = result.map(r=>ERC20_INTERFACE.decodeFunctionResult(\"balanceOf\", r));\n          const cake = new BigNumber(cakeAmount);\n          const busd = new BigNumber(busdAmount);\n          const cakePrice = busd.div(cake).toNumber();\n          setData(cakePrice)\n        }\n      } catch (error) {\n        console.error('Unable to fetch price data:', error)\n      }\n    }\n\n    fetchData()\n  }, [multicallContract])\n\n  return data\n}\n\nexport default useGetPriceData\n"]},"metadata":{},"sourceType":"module"}