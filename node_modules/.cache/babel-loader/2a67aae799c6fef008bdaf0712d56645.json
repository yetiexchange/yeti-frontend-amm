{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport application from './application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\nimport { getThemeCache } from '../utils/theme';\nconst PERSISTED_KEYS = ['user', 'transactions'];\nconst loadedState = load({\n  states: PERSISTED_KEYS\n});\n\nif (loadedState.user) {\n  loadedState.user.userDarkMode = getThemeCache();\n}\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists\n  },\n  middleware: [...getDefaultMiddleware({\n    thunk: false\n  }), save({\n    states: PERSISTED_KEYS\n  })],\n  preloadedState: loadedState\n});\nstore.dispatch(updateVersion());\nexport default store;","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/state/index.ts"],"names":["configureStore","getDefaultMiddleware","save","load","application","updateVersion","user","transactions","swap","mint","lists","burn","multicall","getThemeCache","PERSISTED_KEYS","loadedState","states","userDarkMode","store","reducer","middleware","thunk","preloadedState","dispatch"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,2BAA3B;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAUA,MAAMC,cAAwB,GAAG,CAAC,MAAD,EAAS,cAAT,CAAjC;AACA,MAAMC,WAAW,GAAGZ,IAAI,CAAC;AAAEa,EAAAA,MAAM,EAAEF;AAAV,CAAD,CAAxB;;AACA,IAAIC,WAAW,CAACT,IAAhB,EAAsB;AACpBS,EAAAA,WAAW,CAACT,IAAZ,CAAiBW,YAAjB,GAAgCJ,aAAa,EAA7C;AACD;;AAED,MAAMK,KAAK,GAAGlB,cAAc,CAAC;AAC3BmB,EAAAA,OAAO,EAAE;AACPf,IAAAA,WADO;AAEPE,IAAAA,IAFO;AAGPC,IAAAA,YAHO;AAIPC,IAAAA,IAJO;AAKPC,IAAAA,IALO;AAMPE,IAAAA,IANO;AAOPC,IAAAA,SAPO;AAQPF,IAAAA;AARO,GADkB;AAW3BU,EAAAA,UAAU,EAAE,CAAC,GAAGnB,oBAAoB,CAAC;AAAEoB,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAxB,EAA4CnB,IAAI,CAAC;AAAEc,IAAAA,MAAM,EAAEF;AAAV,GAAD,CAAhD,CAXe;AAY3BQ,EAAAA,cAAc,EAAEP;AAZW,CAAD,CAA5B;AAeAG,KAAK,CAACK,QAAN,CAAelB,aAAa,EAA5B;AAEA,eAAea,KAAf","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport application from './application/reducer'\nimport { updateVersion } from './global/actions'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport swap from './swap/reducer'\nimport mint from './mint/reducer'\nimport lists from './lists/reducer'\nimport burn from './burn/reducer'\nimport multicall from './multicall/reducer'\nimport { getThemeCache } from '../utils/theme'\n\ntype MergedState = {\n  user: {\n    [key: string]: any\n  }\n  transactions: {\n    [key: string]: any\n  }\n}\nconst PERSISTED_KEYS: string[] = ['user', 'transactions']\nconst loadedState = load({ states: PERSISTED_KEYS }) as MergedState\nif (loadedState.user) {\n  loadedState.user.userDarkMode = getThemeCache()\n}\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists,\n  },\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\n  preloadedState: loadedState,\n})\n\nstore.dispatch(updateVersion())\n\nexport default store\n\nexport type AppState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"]},"metadata":{},"sourceType":"module"}