{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.browserSha512 = exports.browserSha256 = exports.browserHmacSha512Sign = exports.browserHmacSha256Sign = exports.browserAesDecrypt = exports.browserAesEncrypt = exports.browserImportKey = exports.browserExportKey = exports.getOps = exports.getAlgo = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;\n\nvar constants_1 = require(\"../constants\");\n\nfunction getBrowerCrypto() {\n  return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};\n}\n\nexports.getBrowerCrypto = getBrowerCrypto;\n\nfunction getSubtleCrypto() {\n  var browserCrypto = getBrowerCrypto();\n  return browserCrypto.subtle || browserCrypto.webkitSubtle;\n}\n\nexports.getSubtleCrypto = getSubtleCrypto;\n\nfunction getAlgo(type) {\n  return type === constants_1.AES_BROWSER_ALGO ? {\n    length: constants_1.AES_LENGTH,\n    name: constants_1.AES_BROWSER_ALGO\n  } : {\n    hash: {\n      name: constants_1.HMAC_BROWSER_ALGO\n    },\n    name: constants_1.HMAC_BROWSER\n  };\n}\n\nexports.getAlgo = getAlgo;\n\nfunction getOps(type) {\n  return type === constants_1.AES_BROWSER_ALGO ? [constants_1.ENCRYPT_OP, constants_1.DECRYPT_OP] : [constants_1.SIGN_OP, constants_1.VERIFY_OP];\n}\n\nexports.getOps = getOps;\n\nfunction browserExportKey(cryptoKey) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.AES_BROWSER_ALGO;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var subtle;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            subtle = getSubtleCrypto();\n            _context.t0 = Uint8Array;\n            _context.next = 4;\n            return subtle.exportKey('raw', cryptoKey);\n\n          case 4:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", new _context.t0(_context.t1));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.browserExportKey = browserExportKey;\n\nfunction browserImportKey(buffer) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.AES_BROWSER_ALGO;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", getSubtleCrypto().importKey('raw', buffer, getAlgo(type), true, getOps(type)));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.browserImportKey = browserImportKey;\n\nfunction browserAesEncrypt(iv, key, data) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var subtle, cryptoKey, result;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            subtle = getSubtleCrypto();\n            _context3.next = 3;\n            return browserImportKey(key, constants_1.AES_BROWSER_ALGO);\n\n          case 3:\n            cryptoKey = _context3.sent;\n            _context3.next = 6;\n            return subtle.encrypt({\n              iv: iv,\n              name: constants_1.AES_BROWSER_ALGO\n            }, cryptoKey, data);\n\n          case 6:\n            result = _context3.sent;\n            return _context3.abrupt(\"return\", new Uint8Array(result));\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.browserAesEncrypt = browserAesEncrypt;\n\nfunction browserAesDecrypt(iv, key, data) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var subtle, cryptoKey, result;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            subtle = getSubtleCrypto();\n            _context4.next = 3;\n            return browserImportKey(key, constants_1.AES_BROWSER_ALGO);\n\n          case 3:\n            cryptoKey = _context4.sent;\n            _context4.next = 6;\n            return subtle.decrypt({\n              iv: iv,\n              name: constants_1.AES_BROWSER_ALGO\n            }, cryptoKey, data);\n\n          case 6:\n            result = _context4.sent;\n            return _context4.abrupt(\"return\", new Uint8Array(result));\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nexports.browserAesDecrypt = browserAesDecrypt;\n\nfunction browserHmacSha256Sign(key, data) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var subtle, cryptoKey, signature;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            subtle = getSubtleCrypto();\n            _context5.next = 3;\n            return browserImportKey(key, constants_1.HMAC_BROWSER);\n\n          case 3:\n            cryptoKey = _context5.sent;\n            _context5.next = 6;\n            return subtle.sign({\n              length: constants_1.HMAC_LENGTH,\n              name: constants_1.HMAC_BROWSER\n            }, cryptoKey, data);\n\n          case 6:\n            signature = _context5.sent;\n            return _context5.abrupt(\"return\", new Uint8Array(signature));\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n}\n\nexports.browserHmacSha256Sign = browserHmacSha256Sign;\n\nfunction browserHmacSha512Sign(key, data) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    var subtle, cryptoKey, signature;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            subtle = getSubtleCrypto();\n            _context6.next = 3;\n            return browserImportKey(key, constants_1.HMAC_BROWSER);\n\n          case 3:\n            cryptoKey = _context6.sent;\n            _context6.next = 6;\n            return subtle.sign({\n              length: constants_1.LENGTH_512,\n              name: constants_1.HMAC_BROWSER\n            }, cryptoKey, data);\n\n          case 6:\n            signature = _context6.sent;\n            return _context6.abrupt(\"return\", new Uint8Array(signature));\n\n          case 8:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n}\n\nexports.browserHmacSha512Sign = browserHmacSha512Sign;\n\nfunction browserSha256(data) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n    var subtle, result;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            subtle = getSubtleCrypto();\n            _context7.next = 3;\n            return subtle.digest({\n              name: constants_1.SHA256_BROWSER_ALGO\n            }, data);\n\n          case 3:\n            result = _context7.sent;\n            return _context7.abrupt(\"return\", new Uint8Array(result));\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n}\n\nexports.browserSha256 = browserSha256;\n\nfunction browserSha512(data) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n    var subtle, result;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            subtle = getSubtleCrypto();\n            _context8.next = 3;\n            return subtle.digest({\n              name: constants_1.SHA512_BROWSER_ALGO\n            }, data);\n\n          case 3:\n            result = _context8.sent;\n            return _context8.abrupt(\"return\", new Uint8Array(result));\n\n          case 5:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n}\n\nexports.browserSha512 = browserSha512;","map":{"version":3,"sources":["../../../../src/helpers/env/browser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.browserSha512 = exports.browserSha256 = exports.browserHmacSha512Sign = exports.browserHmacSha256Sign = exports.browserAesDecrypt = exports.browserAesEncrypt = exports.browserImportKey = exports.browserExportKey = exports.getOps = exports.getAlgo = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;\nconst constants_1 = require(\"../constants\");\nfunction getBrowerCrypto() {\n    return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};\n}\nexports.getBrowerCrypto = getBrowerCrypto;\nfunction getSubtleCrypto() {\n    const browserCrypto = getBrowerCrypto();\n    return browserCrypto.subtle || browserCrypto.webkitSubtle;\n}\nexports.getSubtleCrypto = getSubtleCrypto;\nfunction getAlgo(type) {\n    return type === constants_1.AES_BROWSER_ALGO\n        ? { length: constants_1.AES_LENGTH, name: constants_1.AES_BROWSER_ALGO }\n        : {\n            hash: { name: constants_1.HMAC_BROWSER_ALGO },\n            name: constants_1.HMAC_BROWSER,\n        };\n}\nexports.getAlgo = getAlgo;\nfunction getOps(type) {\n    return type === constants_1.AES_BROWSER_ALGO\n        ? [constants_1.ENCRYPT_OP, constants_1.DECRYPT_OP]\n        : [constants_1.SIGN_OP, constants_1.VERIFY_OP];\n}\nexports.getOps = getOps;\nfunction browserExportKey(cryptoKey, type = constants_1.AES_BROWSER_ALGO) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const subtle = getSubtleCrypto();\n        return new Uint8Array(yield subtle.exportKey('raw', cryptoKey));\n    });\n}\nexports.browserExportKey = browserExportKey;\nfunction browserImportKey(buffer, type = constants_1.AES_BROWSER_ALGO) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return getSubtleCrypto().importKey('raw', buffer, getAlgo(type), true, getOps(type));\n    });\n}\nexports.browserImportKey = browserImportKey;\nfunction browserAesEncrypt(iv, key, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const subtle = getSubtleCrypto();\n        const cryptoKey = yield browserImportKey(key, constants_1.AES_BROWSER_ALGO);\n        const result = yield subtle.encrypt({\n            iv,\n            name: constants_1.AES_BROWSER_ALGO,\n        }, cryptoKey, data);\n        return new Uint8Array(result);\n    });\n}\nexports.browserAesEncrypt = browserAesEncrypt;\nfunction browserAesDecrypt(iv, key, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const subtle = getSubtleCrypto();\n        const cryptoKey = yield browserImportKey(key, constants_1.AES_BROWSER_ALGO);\n        const result = yield subtle.decrypt({\n            iv,\n            name: constants_1.AES_BROWSER_ALGO,\n        }, cryptoKey, data);\n        return new Uint8Array(result);\n    });\n}\nexports.browserAesDecrypt = browserAesDecrypt;\nfunction browserHmacSha256Sign(key, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const subtle = getSubtleCrypto();\n        const cryptoKey = yield browserImportKey(key, constants_1.HMAC_BROWSER);\n        const signature = yield subtle.sign({\n            length: constants_1.HMAC_LENGTH,\n            name: constants_1.HMAC_BROWSER,\n        }, cryptoKey, data);\n        return new Uint8Array(signature);\n    });\n}\nexports.browserHmacSha256Sign = browserHmacSha256Sign;\nfunction browserHmacSha512Sign(key, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const subtle = getSubtleCrypto();\n        const cryptoKey = yield browserImportKey(key, constants_1.HMAC_BROWSER);\n        const signature = yield subtle.sign({\n            length: constants_1.LENGTH_512,\n            name: constants_1.HMAC_BROWSER,\n        }, cryptoKey, data);\n        return new Uint8Array(signature);\n    });\n}\nexports.browserHmacSha512Sign = browserHmacSha512Sign;\nfunction browserSha256(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const subtle = getSubtleCrypto();\n        const result = yield subtle.digest({\n            name: constants_1.SHA256_BROWSER_ALGO,\n        }, data);\n        return new Uint8Array(result);\n    });\n}\nexports.browserSha256 = browserSha256;\nfunction browserSha512(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const subtle = getSubtleCrypto();\n        const result = yield subtle.digest({\n            name: constants_1.SHA512_BROWSER_ALGO,\n        }, data);\n        return new Uint8Array(result);\n    });\n}\nexports.browserSha512 = browserSha512;\n//# sourceMappingURL=browser.js.map"]},"metadata":{},"sourceType":"script"}