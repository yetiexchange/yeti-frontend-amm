{"ast":null,"code":"import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk';\n// import { bsc, fortmatic, injected, portis, walletconnect, walletlink } from '../connectors'\nimport { injected, bsc } from '../connectors'; // TODO\n\nexport const ROUTER_ADDRESS = '0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F'; // a list of tokens by chain\n\nexport const DAI = new Token(ChainId.MAINNET, '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3', 18, 'DAI', 'Dai Stablecoin');\nexport const BUSD = new Token(ChainId.MAINNET, '0xe9e7cea3dedca5984780bafc599bd69add087d56', 18, 'BUSD', 'Binance USD');\nexport const USDT = new Token(ChainId.MAINNET, '0x55d398326f99059ff775485246999027b3197955', 18, 'USDT', 'Tether USD');\nexport const EOS = new Token(ChainId.MAINNET, '0x56b6fb708fc5732dec1afc8d8556423a2edccbd6', 18, 'EOS', 'EOS Token');\nexport const DOT = new Token(ChainId.MAINNET, '0x7083609fce4d1d8dc0c979aab8c869ea2c873402', 18, 'DOT', 'Polkadot Token');\nexport const ETH = new Token(ChainId.MAINNET, '0x2170ed0880ac9a755fd29b2688956bd959f933f8', 18, 'ETH', 'Ethereum Token');\nconst WETH_ONLY = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]]\n}; // used to construct intermediary pairs for trading\n\nexport const BASES_TO_CHECK_TRADES_AGAINST = { ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT, EOS, DOT]\n};\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\n\nexport const CUSTOM_BASES = {\n  [ChainId.MAINNET]: {\n    [ETH.address]: [DAI, WETH[ChainId.MAINNET]]\n  }\n}; // used for display in the default list when adding liquidity\n\nexport const SUGGESTED_BASES = { ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT]\n}; // used to construct the list of all pairs we consider by default in the frontend\n\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = { ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT]\n};\nexport const PINNED_PAIRS = {\n  [ChainId.MAINNET]: [[new Token(ChainId.MAINNET, '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82', 18, 'CAKE', 'PancakeSwap Token'), new Token(ChainId.MAINNET, '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c', 18, 'WBNB', 'Wrapped BNB')], [BUSD, USDT], [DAI, USDT]]\n};\nexport const SUPPORTED_WALLETS = {\n  BSC: {\n    connector: bsc,\n    name: 'Binance Chain Wallet',\n    iconName: 'binance.svg',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  },\n  INJECTED: {\n    connector: injected,\n    name: 'Injected',\n    iconName: 'arrow-right.svg',\n    description: 'Injected web3 provider.',\n    href: null,\n    color: '#010101',\n    primary: true\n  },\n  METAMASK: {\n    connector: injected,\n    name: 'MetaMask',\n    iconName: 'metamask.png',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  } // WALLET_CONNECT: {\n  //   connector: walletconnect,\n  //   name: 'WalletConnect',\n  //   iconName: 'walletConnectIcon.svg',\n  //   description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n  //   href: null,\n  //   color: '#4196FC',\n  //   mobile: true\n  // },\n  // WALLET_LINK: {\n  //   connector: walletlink,\n  //   name: 'Coinbase Wallet',\n  //   iconName: 'coinbaseWalletIcon.svg',\n  //   description: 'Use Coinbase Wallet app on mobile device',\n  //   href: null,\n  //   color: '#315CF5'\n  // },\n  // COINBASE_LINK: {\n  //   name: 'Open in Coinbase Wallet',\n  //   iconName: 'coinbaseWalletIcon.svg',\n  //   description: 'Open in Coinbase Wallet app.',\n  //   href: 'https://go.cb-w.com/mtUDhEZPy1',\n  //   color: '#315CF5',\n  //   mobile: true,\n  //   mobileOnly: true\n  // },\n  // FORTMATIC: {\n  //   connector: fortmatic,\n  //   name: 'Fortmatic',\n  //   iconName: 'fortmaticIcon.png',\n  //   description: 'Login using Fortmatic hosted wallet',\n  //   href: null,\n  //   color: '#6748FF',\n  //   mobile: true\n  // },\n  // Portis: {\n  //   connector: portis,\n  //   name: 'Portis',\n  //   iconName: 'portisIcon.png',\n  //   description: 'Login using Portis hosted wallet',\n  //   href: null,\n  //   color: '#4A6C9B',\n  //   mobile: true\n  // }\n\n};\nexport const NetworkContextName = 'NETWORK'; // default allowed slippage, in bips\n\nexport const INITIAL_ALLOWED_SLIPPAGE = 80; // 20 minutes, denominated in seconds\n\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20; // one basis point\n\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000); // used for warning states\n\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\n\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\n\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\n\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\n\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\n\nexport const MIN_ETH = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 ETH\n\nexport const BETTER_TRADE_LINK_THRESHOLD = new Percent(JSBI.BigInt(75), JSBI.BigInt(10000));","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","injected","bsc","ROUTER_ADDRESS","DAI","MAINNET","BUSD","USDT","EOS","DOT","ETH","WETH_ONLY","BSCTESTNET","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","address","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","SUPPORTED_WALLETS","BSC","connector","name","iconName","description","href","color","INJECTED","primary","METAMASK","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate","BETTER_TRADE_LINK_THRESHOLD"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\n// import { bsc, fortmatic, injected, portis, walletconnect, walletlink } from '../connectors'\nimport { injected, bsc } from '../connectors'\n// TODO\nexport const ROUTER_ADDRESS = '0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\nexport const DAI = new Token(ChainId.MAINNET, '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3', 18, 'DAI', 'Dai Stablecoin')\nexport const BUSD = new Token(ChainId.MAINNET, '0xe9e7cea3dedca5984780bafc599bd69add087d56', 18, 'BUSD', 'Binance USD')\nexport const USDT = new Token(ChainId.MAINNET, '0x55d398326f99059ff775485246999027b3197955', 18, 'USDT', 'Tether USD')\nexport const EOS = new Token(ChainId.MAINNET, '0x56b6fb708fc5732dec1afc8d8556423a2edccbd6', 18, 'EOS', 'EOS Token')\nexport const DOT = new Token(ChainId.MAINNET, '0x7083609fce4d1d8dc0c979aab8c869ea2c873402', 18, 'DOT', 'Polkadot Token')\nexport const ETH = new Token(ChainId.MAINNET, '0x2170ed0880ac9a755fd29b2688956bd959f933f8', 18, 'ETH', 'Ethereum Token')\n\nconst WETH_ONLY: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]]\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT, EOS, DOT]\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {\n    [ETH.address]: [DAI, WETH[ChainId.MAINNET]]\n  }\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT]\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT]\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.MAINNET]: [\n    [\n      new Token(ChainId.MAINNET, '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82', 18, 'CAKE', 'PancakeSwap Token'),\n      new Token(ChainId.MAINNET, '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c', 18, 'WBNB', 'Wrapped BNB')\n    ],\n    [BUSD, USDT],\n    [DAI, USDT]\n  ]\n}\n\nexport interface WalletInfo {\n  connector?: AbstractConnector\n  name: string\n  iconName: string\n  description: string\n  href: string | null\n  color: string\n  primary?: true\n  mobile?: true\n  mobileOnly?: true\n}\n\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\n  BSC: {\n    connector: bsc,\n    name: 'Binance Chain Wallet',\n    iconName: 'binance.svg',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  },\n  INJECTED: {\n    connector: injected,\n    name: 'Injected',\n    iconName: 'arrow-right.svg',\n    description: 'Injected web3 provider.',\n    href: null,\n    color: '#010101',\n    primary: true\n  },\n  METAMASK: {\n    connector: injected,\n    name: 'MetaMask',\n    iconName: 'metamask.png',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  }\n  // WALLET_CONNECT: {\n  //   connector: walletconnect,\n  //   name: 'WalletConnect',\n  //   iconName: 'walletConnectIcon.svg',\n  //   description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n  //   href: null,\n  //   color: '#4196FC',\n  //   mobile: true\n  // },\n  // WALLET_LINK: {\n  //   connector: walletlink,\n  //   name: 'Coinbase Wallet',\n  //   iconName: 'coinbaseWalletIcon.svg',\n  //   description: 'Use Coinbase Wallet app on mobile device',\n  //   href: null,\n  //   color: '#315CF5'\n  // },\n  // COINBASE_LINK: {\n  //   name: 'Open in Coinbase Wallet',\n  //   iconName: 'coinbaseWalletIcon.svg',\n  //   description: 'Open in Coinbase Wallet app.',\n  //   href: 'https://go.cb-w.com/mtUDhEZPy1',\n  //   color: '#315CF5',\n  //   mobile: true,\n  //   mobileOnly: true\n  // },\n  // FORTMATIC: {\n  //   connector: fortmatic,\n  //   name: 'Fortmatic',\n  //   iconName: 'fortmaticIcon.png',\n  //   description: 'Login using Fortmatic hosted wallet',\n  //   href: null,\n  //   color: '#6748FF',\n  //   mobile: true\n  // },\n  // Portis: {\n  //   connector: portis,\n  //   name: 'Portis',\n  //   iconName: 'portisIcon.png',\n  //   description: 'Login using Portis hosted wallet',\n  //   href: null,\n  //   color: '#4A6C9B',\n  //   mobile: true\n  // }\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 80\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\nexport const BETTER_TRADE_LINK_THRESHOLD = new Percent(JSBI.BigInt(75), JSBI.BigInt(10000))\n"]},"metadata":{},"sourceType":"module"}