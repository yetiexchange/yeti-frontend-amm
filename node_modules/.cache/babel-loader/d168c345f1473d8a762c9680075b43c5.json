{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar isoCrypto = tslib_1.__importStar(require(\"@pedrouid/iso-crypto\"));\n\nvar encUtils = tslib_1.__importStar(require(\"enc-utils\"));\n\nvar utils_1 = require(\"@walletconnect/utils\");\n\nfunction generateKey(length) {\n  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _length, bytes, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _length = (length || 256) / 8;\n            bytes = isoCrypto.randomBytes(_length);\n            result = utils_1.convertBufferToArrayBuffer(encUtils.arrayToBuffer(bytes));\n            return _context.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.generateKey = generateKey;\n\nfunction verifyHmac(payload, key) {\n  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var cipherText, iv, hmac, hmacHex, unsigned, chmac, chmacHex;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cipherText = encUtils.hexToArray(payload.data);\n            iv = encUtils.hexToArray(payload.iv);\n            hmac = encUtils.hexToArray(payload.hmac);\n            hmacHex = encUtils.arrayToHex(hmac, false);\n            unsigned = encUtils.concatArrays(cipherText, iv);\n            _context2.next = 7;\n            return isoCrypto.hmacSha256Sign(key, unsigned);\n\n          case 7:\n            chmac = _context2.sent;\n            chmacHex = encUtils.arrayToHex(chmac, false);\n\n            if (!(encUtils.removeHexPrefix(hmacHex) === encUtils.removeHexPrefix(chmacHex))) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", true);\n\n          case 11:\n            return _context2.abrupt(\"return\", false);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.verifyHmac = verifyHmac;\n\nfunction encrypt(data, key, providedIv) {\n  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _key, ivArrayBuffer, iv, ivHex, contentString, content, cipherText, cipherTextHex, unsigned, hmac, hmacHex;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _key = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(key));\n            _context3.t0 = providedIv;\n\n            if (_context3.t0) {\n              _context3.next = 6;\n              break;\n            }\n\n            _context3.next = 5;\n            return generateKey(128);\n\n          case 5:\n            _context3.t0 = _context3.sent;\n\n          case 6:\n            ivArrayBuffer = _context3.t0;\n            iv = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(ivArrayBuffer));\n            ivHex = encUtils.arrayToHex(iv, false);\n            contentString = JSON.stringify(data);\n            content = encUtils.utf8ToArray(contentString);\n            _context3.next = 13;\n            return isoCrypto.aesCbcEncrypt(iv, _key, content);\n\n          case 13:\n            cipherText = _context3.sent;\n            cipherTextHex = encUtils.arrayToHex(cipherText, false);\n            unsigned = encUtils.concatArrays(cipherText, iv);\n            _context3.next = 18;\n            return isoCrypto.hmacSha256Sign(_key, unsigned);\n\n          case 18:\n            hmac = _context3.sent;\n            hmacHex = encUtils.arrayToHex(hmac, false);\n            return _context3.abrupt(\"return\", {\n              data: cipherTextHex,\n              hmac: hmacHex,\n              iv: ivHex\n            });\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.encrypt = encrypt;\n\nfunction decrypt(payload, key) {\n  return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var _key, verified, cipherText, iv, buffer, utf8, data;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _key = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(key));\n\n            if (_key) {\n              _context4.next = 3;\n              break;\n            }\n\n            throw new Error(\"Missing key: required for decryption\");\n\n          case 3:\n            _context4.next = 5;\n            return verifyHmac(payload, _key);\n\n          case 5:\n            verified = _context4.sent;\n\n            if (verified) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 8:\n            cipherText = encUtils.hexToArray(payload.data);\n            iv = encUtils.hexToArray(payload.iv);\n            _context4.next = 12;\n            return isoCrypto.aesCbcDecrypt(iv, _key, cipherText);\n\n          case 12:\n            buffer = _context4.sent;\n            utf8 = encUtils.arrayToUtf8(buffer);\n            _context4.prev = 14;\n            data = JSON.parse(utf8);\n            _context4.next = 21;\n            break;\n\n          case 18:\n            _context4.prev = 18;\n            _context4.t0 = _context4[\"catch\"](14);\n            return _context4.abrupt(\"return\", null);\n\n          case 21:\n            return _context4.abrupt(\"return\", data);\n\n          case 22:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[14, 18]]);\n  }));\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst isoCrypto = tslib_1.__importStar(require(\"@pedrouid/iso-crypto\"));\nconst encUtils = tslib_1.__importStar(require(\"enc-utils\"));\nconst utils_1 = require(\"@walletconnect/utils\");\nfunction generateKey(length) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _length = (length || 256) / 8;\n        const bytes = isoCrypto.randomBytes(_length);\n        const result = utils_1.convertBufferToArrayBuffer(encUtils.arrayToBuffer(bytes));\n        return result;\n    });\n}\nexports.generateKey = generateKey;\nfunction verifyHmac(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const cipherText = encUtils.hexToArray(payload.data);\n        const iv = encUtils.hexToArray(payload.iv);\n        const hmac = encUtils.hexToArray(payload.hmac);\n        const hmacHex = encUtils.arrayToHex(hmac, false);\n        const unsigned = encUtils.concatArrays(cipherText, iv);\n        const chmac = yield isoCrypto.hmacSha256Sign(key, unsigned);\n        const chmacHex = encUtils.arrayToHex(chmac, false);\n        if (encUtils.removeHexPrefix(hmacHex) === encUtils.removeHexPrefix(chmacHex)) {\n            return true;\n        }\n        return false;\n    });\n}\nexports.verifyHmac = verifyHmac;\nfunction encrypt(data, key, providedIv) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _key = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(key));\n        const ivArrayBuffer = providedIv || (yield generateKey(128));\n        const iv = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(ivArrayBuffer));\n        const ivHex = encUtils.arrayToHex(iv, false);\n        const contentString = JSON.stringify(data);\n        const content = encUtils.utf8ToArray(contentString);\n        const cipherText = yield isoCrypto.aesCbcEncrypt(iv, _key, content);\n        const cipherTextHex = encUtils.arrayToHex(cipherText, false);\n        const unsigned = encUtils.concatArrays(cipherText, iv);\n        const hmac = yield isoCrypto.hmacSha256Sign(_key, unsigned);\n        const hmacHex = encUtils.arrayToHex(hmac, false);\n        return {\n            data: cipherTextHex,\n            hmac: hmacHex,\n            iv: ivHex,\n        };\n    });\n}\nexports.encrypt = encrypt;\nfunction decrypt(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _key = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(key));\n        if (!_key) {\n            throw new Error(\"Missing key: required for decryption\");\n        }\n        const verified = yield verifyHmac(payload, _key);\n        if (!verified) {\n            return null;\n        }\n        const cipherText = encUtils.hexToArray(payload.data);\n        const iv = encUtils.hexToArray(payload.iv);\n        const buffer = yield isoCrypto.aesCbcDecrypt(iv, _key, cipherText);\n        const utf8 = encUtils.arrayToUtf8(buffer);\n        let data;\n        try {\n            data = JSON.parse(utf8);\n        }\n        catch (error) {\n            return null;\n        }\n        return data;\n    });\n}\nexports.decrypt = decrypt;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}