{"ast":null,"code":"import _regeneratorRuntime from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _wrapNativeSuper from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";function wait(ms){return new Promise(function(resolve){return setTimeout(resolve,ms);});}function waitRandom(min,max){return wait(min+Math.round(Math.random()*Math.max(0,max-min)));}/**\n * This error is thrown if the function is cancelled before completing\n */export var CancelledError=/*#__PURE__*/function(_Error){_inherits(CancelledError,_Error);var _super=_createSuper(CancelledError);function CancelledError(){_classCallCheck(this,CancelledError);return _super.call(this,'Cancelled');}return CancelledError;}(/*#__PURE__*/_wrapNativeSuper(Error));/**\n * Throw this error if the function should retry\n */export var RetryableError=/*#__PURE__*/function(_Error2){_inherits(RetryableError,_Error2);var _super2=_createSuper(RetryableError);function RetryableError(){_classCallCheck(this,RetryableError);return _super2.apply(this,arguments);}return RetryableError;}(/*#__PURE__*/_wrapNativeSuper(Error));/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */export function retry(fn,_ref){var n=_ref.n,minWait=_ref.minWait,maxWait=_ref.maxWait;var completed=false;var rejectCancelled;// eslint-disable-next-line no-async-promise-executor\nvar promise=new Promise(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve,reject){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:rejectCancelled=reject;// eslint-disable-next-line no-constant-condition\ncase 1:if(!true){_context.next=24;break;}result=void 0;_context.prev=3;_context.next=6;return fn();case 6:result=_context.sent;if(!completed){resolve(result);completed=true;}return _context.abrupt(\"break\",24);case 11:_context.prev=11;_context.t0=_context[\"catch\"](3);if(!completed){_context.next=15;break;}return _context.abrupt(\"break\",24);case 15:if(!(n<=0||!(_context.t0 instanceof RetryableError))){_context.next=19;break;}reject(_context.t0);completed=true;return _context.abrupt(\"break\",24);case 19:n--;case 20:_context.next=22;return waitRandom(minWait,maxWait);case 22:_context.next=1;break;case 24:case\"end\":return _context.stop();}}},_callee,null,[[3,11]]);}));return function(_x,_x2){return _ref2.apply(this,arguments);};}());return{promise:promise,cancel:function cancel(){if(completed)return;completed=true;rejectCancelled(new CancelledError());}};}","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/utils/retry.ts"],"names":["wait","ms","Promise","resolve","setTimeout","waitRandom","min","max","Math","round","random","CancelledError","Error","RetryableError","retry","fn","n","minWait","maxWait","completed","rejectCancelled","promise","reject","result","cancel"],"mappings":"uzBAAA,QAASA,CAAAA,IAAT,CAAcC,EAAd,CAAyC,CACvC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,QAAaC,CAAAA,UAAU,CAACD,OAAD,CAAUF,EAAV,CAAvB,EAAZ,CAAP,CACD,CAED,QAASI,CAAAA,UAAT,CAAoBC,GAApB,CAAiCC,GAAjC,CAA6D,CAC3D,MAAOP,CAAAA,IAAI,CAACM,GAAG,CAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBF,IAAI,CAACD,GAAL,CAAS,CAAT,CAAYA,GAAG,CAAGD,GAAlB,CAA3B,CAAP,CAAX,CACD,CAED;AACA;AACA,GACA,UAAaK,CAAAA,cAAb,wGACE,yBAAc,8DACN,WADM,EAEb,CAHH,sDAAoCC,KAApC,GAMA;AACA;AACA,GACA,UAAaC,CAAAA,cAAb,sQAAoCD,KAApC,GAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASE,CAAAA,KAAT,CACLC,EADK,MAGwC,IAD3CC,CAAAA,CAC2C,MAD3CA,CAC2C,CADxCC,OACwC,MADxCA,OACwC,CAD/BC,OAC+B,MAD/BA,OAC+B,CAC7C,GAAIC,CAAAA,SAAS,CAAG,KAAhB,CACA,GAAIC,CAAAA,eAAJ,CACA;AACA,GAAMC,CAAAA,OAAO,CAAG,GAAInB,CAAAA,OAAJ,2FAAe,iBAAOC,OAAP,CAAgBmB,MAAhB,6HAC7BF,eAAe,CAAGE,MAAlB,CACA;AAF6B,WAGtB,IAHsB,0BAIvBC,MAJuB,8CAMVR,CAAAA,EAAE,EANQ,QAMzBQ,MANyB,eAOzB,GAAI,CAACJ,SAAL,CAAgB,CACdhB,OAAO,CAACoB,MAAD,CAAP,CACAJ,SAAS,CAAG,IAAZ,CACD,CAVwB,iGAarBA,SAbqB,0EAgBrBH,CAAC,EAAI,CAAL,EAAU,EAAE,sBAAiBH,CAAAA,cAAnB,CAhBW,2BAiBvBS,MAAM,aAAN,CACAH,SAAS,CAAG,IAAZ,CAlBuB,2CAqBzBH,CAAC,GArBwB,+BAuBrBX,CAAAA,UAAU,CAACY,OAAD,CAAUC,OAAV,CAvBW,oGAAf,oEAAhB,CA0BA,MAAO,CACLG,OAAO,CAAPA,OADK,CAELG,MAAM,CAAE,iBAAM,CACZ,GAAIL,SAAJ,CAAe,OACfA,SAAS,CAAG,IAAZ,CACAC,eAAe,CAAC,GAAIT,CAAAA,cAAJ,EAAD,CAAf,CACD,CANI,CAAP,CAQD","sourcesContent":["function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number }\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  // eslint-disable-next-line no-async-promise-executor\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let result: T\n      try {\n        result = await fn()\n        if (!completed) {\n          resolve(result)\n          completed = true\n        }\n        break\n      } catch (error) {\n        if (completed) {\n          break\n        }\n        if (n <= 0 || !(error instanceof RetryableError)) {\n          reject(error)\n          completed = true\n          break\n        }\n        n--\n      }\n      await waitRandom(minWait, maxWait)\n    }\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}