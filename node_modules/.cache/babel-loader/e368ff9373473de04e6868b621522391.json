{"ast":null,"code":"import _regeneratorRuntime from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"H:/XETI/YETI-AMM-DEV/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import BigNumber from'bignumber.js';import{useMulticallContract}from'./useContract';import ERC20_INTERFACE from'../constants/abis/erc20';import priceContracts from'../constants/eggPriceContracts';/**\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */var api='https://api.pancakeswap.com/api/v1/price';var useGetPriceData=function useGetPriceData(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var multicallContract=useMulticallContract();useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var cakeAddress,busdAddress,lpAddress,calls,_yield$multicallContr,_yield$multicallContr2,resultsBlockNumber,result,_result$map,_result$map2,cakeAmount,busdAmount,cake,busd,cakePrice;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!multicallContract){_context.next=15;break;}cakeAddress=priceContracts.cakeAddress,busdAddress=priceContracts.busdAddress,lpAddress=priceContracts.lpAddress;calls=[[cakeAddress,ERC20_INTERFACE.encodeFunctionData(\"balanceOf\",[lpAddress])],[busdAddress,ERC20_INTERFACE.encodeFunctionData(\"balanceOf\",[lpAddress])]];_context.next=6;return multicallContract.aggregate(calls);case 6:_yield$multicallContr=_context.sent;_yield$multicallContr2=_slicedToArray(_yield$multicallContr,2);resultsBlockNumber=_yield$multicallContr2[0];result=_yield$multicallContr2[1];_result$map=result.map(function(r){return ERC20_INTERFACE.decodeFunctionResult(\"balanceOf\",r);}),_result$map2=_slicedToArray(_result$map,2),cakeAmount=_result$map2[0],busdAmount=_result$map2[1];cake=new BigNumber(cakeAmount);busd=new BigNumber(busdAmount);cakePrice=busd.div(cake).toNumber();setData(cakePrice);case 15:_context.next=20;break;case 17:_context.prev=17;_context.t0=_context[\"catch\"](0);console.error('Unable to fetch price data:',_context.t0);case 20:case\"end\":return _context.stop();}}},_callee,null,[[0,17]]);}));return function fetchData(){return _ref.apply(this,arguments);};}();fetchData();},[multicallContract]);return data;};export default useGetPriceData;","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/hooks/useGetPriceData.ts"],"names":["useEffect","useState","BigNumber","useMulticallContract","ERC20_INTERFACE","priceContracts","api","useGetPriceData","data","setData","multicallContract","fetchData","cakeAddress","busdAddress","lpAddress","calls","encodeFunctionData","aggregate","resultsBlockNumber","result","map","r","decodeFunctionResult","cakeAmount","busdAmount","cake","busd","cakePrice","div","toNumber","console","error"],"mappings":"8ZAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,oBAAT,KAAqC,eAArC,CACA,MAAOC,CAAAA,eAAP,KAA4B,yBAA5B,CACA,MAAOC,CAAAA,cAAP,KAA2B,gCAA3B,CASA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,GAAG,CAAG,0CAAZ,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,eACJN,QAAQ,CAAS,CAAT,CADJ,wCACrBO,IADqB,eACfC,OADe,eAG5B,GAAMC,CAAAA,iBAAiB,CAAGP,oBAAoB,EAA9C,CAEAH,SAAS,CAAC,UAAM,CACd,GAAMW,CAAAA,SAAS,0FAAG,6UAEXD,iBAFW,0BAGLE,WAHK,CAGkCP,cAHlC,CAGLO,WAHK,CAGQC,WAHR,CAGkCR,cAHlC,CAGQQ,WAHR,CAGqBC,SAHrB,CAGkCT,cAHlC,CAGqBS,SAHrB,CAINC,KAJM,CAIE,CACZ,CAACH,WAAD,CAAcR,eAAe,CAACY,kBAAhB,CAAmC,WAAnC,CAAgD,CAACF,SAAD,CAAhD,CAAd,CADY,CAEZ,CAACD,WAAD,CAAcT,eAAe,CAACY,kBAAhB,CAAmC,WAAnC,CAAgD,CAACF,SAAD,CAAhD,CAAd,CAFY,CAJF,uBAS+BJ,CAAAA,iBAAiB,CAACO,SAAlB,CAA4BF,KAA5B,CAT/B,2GASLG,kBATK,2BASeC,MATf,uCAUqBA,MAAM,CAACC,GAAP,CAAW,SAAAC,CAAC,QAAEjB,CAAAA,eAAe,CAACkB,oBAAhB,CAAqC,WAArC,CAAkDD,CAAlD,CAAF,EAAZ,CAVrB,4CAULE,UAVK,iBAUOC,UAVP,iBAWNC,IAXM,CAWC,GAAIvB,CAAAA,SAAJ,CAAcqB,UAAd,CAXD,CAYNG,IAZM,CAYC,GAAIxB,CAAAA,SAAJ,CAAcsB,UAAd,CAZD,CAaNG,SAbM,CAaMD,IAAI,CAACE,GAAL,CAASH,IAAT,EAAeI,QAAf,EAbN,CAcZpB,OAAO,CAACkB,SAAD,CAAP,CAdY,yFAiBdG,OAAO,CAACC,KAAR,CAAc,6BAAd,cAjBc,qEAAH,kBAATpB,CAAAA,SAAS,0CAAf,CAqBAA,SAAS,GACV,CAvBQ,CAuBN,CAACD,iBAAD,CAvBM,CAAT,CAyBA,MAAOF,CAAAA,IAAP,CACD,CA/BD,CAiCA,cAAeD,CAAAA,eAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useMulticallContract } from './useContract'\nimport ERC20_INTERFACE from '../constants/abis/erc20'\nimport priceContracts from '../constants/eggPriceContracts'\n\ntype ApiResponse = {\n  prices: {\n    [key: string]: string\n  }\n  update_at: string\n}\n\n/**\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nconst api = 'https://api.pancakeswap.com/api/v1/price'\n\nconst useGetPriceData = () => {\n  const [data, setData] = useState<number>(0)\n\n  const multicallContract = useMulticallContract();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if(multicallContract){\n          const {cakeAddress, busdAddress, lpAddress} = priceContracts;\n          const calls = [\n            [cakeAddress, ERC20_INTERFACE.encodeFunctionData(\"balanceOf\", [lpAddress])],\n            [busdAddress, ERC20_INTERFACE.encodeFunctionData(\"balanceOf\", [lpAddress])],\n          ];\n\n          const [resultsBlockNumber, result] = await multicallContract.aggregate(calls);\n          const [cakeAmount, busdAmount] = result.map(r=>ERC20_INTERFACE.decodeFunctionResult(\"balanceOf\", r));\n          const cake = new BigNumber(cakeAmount);\n          const busd = new BigNumber(busdAmount);\n          const cakePrice = busd.div(cake).toNumber();\n          setData(cakePrice)\n        }\n      } catch (error) {\n        console.error('Unable to fetch price data:', error)\n      }\n    }\n\n    fetchData()\n  }, [multicallContract])\n\n  return data\n}\n\nexport default useGetPriceData\n"]},"metadata":{},"sourceType":"module"}