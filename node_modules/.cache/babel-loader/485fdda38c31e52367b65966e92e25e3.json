{"ast":null,"code":"import{getVersionUpgrade,minVersionBump,VersionUpgrade}from'@uniswap/token-lists';import{useCallback,useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{useFetchListCallback}from'../../hooks/useFetchListCallback';import useInterval from'../../hooks/useInterval';import useIsWindowVisible from'../../hooks/useIsWindowVisible';import{addPopup}from'../application/actions';import{acceptListUpdate}from'./actions';export default function Updater(){var _useActiveWeb3React=useActiveWeb3React(),library=_useActiveWeb3React.library;var dispatch=useDispatch();var lists=useSelector(function(state){return state.lists.byUrl;});var isWindowVisible=useIsWindowVisible();var fetchList=useFetchListCallback();var fetchAllListsCallback=useCallback(function(){if(!isWindowVisible)return;Object.keys(lists).forEach(function(url){return fetchList(url).catch(function(error){return console.error('interval list fetching error',error);});});},[fetchList,isWindowVisible,lists]);// fetch all lists every 10 minutes, but only after we initialize library\nuseInterval(fetchAllListsCallback,library?1000*60*10:null);// whenever a list is not loaded and not loading, try again to load it\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(function(error){return console.error('list added fetching error',error);});}});},[dispatch,fetchList,library,lists]);// automatically update lists if versions are minor/patch\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(list.current&&list.pendingUpdate){var bump=getVersionUpgrade(list.current.version,list.pendingUpdate.version);switch(bump){case VersionUpgrade.NONE:throw new Error('unexpected no version bump');case VersionUpgrade.PATCH:case VersionUpgrade.MINOR:var min=minVersionBump(list.current.tokens,list.pendingUpdate.tokens);// automatically update minor/patch as long as bump matches the min update\nif(bump>=min){dispatch(acceptListUpdate(listUrl));dispatch(addPopup({key:listUrl,content:{listUpdate:{listUrl:listUrl,oldList:list.current,newList:list.pendingUpdate,auto:true}}}));}else{console.error(\"List at url \".concat(listUrl,\" could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR\"));}break;case VersionUpgrade.MAJOR:dispatch(addPopup({key:listUrl,content:{listUpdate:{listUrl:listUrl,auto:false,oldList:list.current,newList:list.pendingUpdate}},removeAfterMs:null}));}}});},[dispatch,lists]);return null;}","map":{"version":3,"sources":["H:/XETI/YETI-AMM-DEV/src/state/lists/updater.ts"],"names":["getVersionUpgrade","minVersionBump","VersionUpgrade","useCallback","useEffect","useDispatch","useSelector","useActiveWeb3React","useFetchListCallback","useInterval","useIsWindowVisible","addPopup","acceptListUpdate","Updater","library","dispatch","lists","state","byUrl","isWindowVisible","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","key","content","listUpdate","oldList","newList","auto","MAJOR","removeAfterMs"],"mappings":"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","sourcesContent":["import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { addPopup } from '../application/actions'\nimport { AppDispatch, AppState } from '../index'\nimport { acceptListUpdate } from './actions'\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>((state) => state.lists.byUrl)\n\n  const isWindowVisible = useIsWindowVisible()\n\n  const fetchList = useFetchListCallback()\n\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach((url) =>\n      fetchList(url).catch((error) => console.error('interval list fetching error', error))\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.error('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n              dispatch(\n                addPopup({\n                  key: listUrl,\n                  content: {\n                    listUpdate: {\n                      listUrl,\n                      oldList: list.current,\n                      newList: list.pendingUpdate,\n                      auto: true,\n                    },\n                  },\n                })\n              )\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n\n          case VersionUpgrade.MAJOR:\n            dispatch(\n              addPopup({\n                key: listUrl,\n                content: {\n                  listUpdate: {\n                    listUrl,\n                    auto: false,\n                    oldList: list.current,\n                    newList: list.pendingUpdate,\n                  },\n                },\n                removeAfterMs: null,\n              })\n            )\n        }\n      }\n    })\n  }, [dispatch, lists])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}